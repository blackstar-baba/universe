"use strict";(self.webpackChunkblackstar_universe=self.webpackChunkblackstar_universe||[]).push([[871],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,v=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(v,o(o({ref:t},s),{},{components:n})):r.createElement(v,o({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3426:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={},o=void 0,c={unversionedId:"Language/Java/vectorization",id:"Language/Java/vectorization",title:"vectorization",description:"description",source:"@site/docs/Language/Java/vectorization.md",sourceDirName:"Language/Java",slug:"/Language/Java/vectorization",permalink:"/docs/Language/Java/vectorization",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"no_gc_coding_techniques",permalink:"/docs/Language/Java/no_gc_coding_techniques"},next:{title:"spread_operator",permalink:"/docs/Language/Javascript/spread_operator"}},l={},p=[{value:"description",id:"description",level:2},{value:"link",id:"link",level:2}],s={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"description"},"description"),(0,a.kt)("p",null,"code like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"/**\n *\u4f7f\u7528\u6b64\u547d\u4ee4\u8fd0\u884c\u4ee5\u663e\u793a\u672c\u673a\u7a0b\u5e8f\u96c6\uff1a<br/>\n * Java -XX:+UnlockDiagnosticVMOptions\n * -XX:CompileCommand=print,VectorizationMicroBenchmark.square\n * VectorizationMicroBenchmark\n */\npublic class VectorizationMicroBenchmark {\n\n    private static void square(float[] a) {\n        for (int i = 0; i < a.length; i++) {\n            a[i] = a[i] * a[i]; // line 11\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        float[] a = new float[1024];\n\n        // repeatedly invoke the method under test. this\n        // causes the JIT compiler to optimize the method\n        for (int i = 0; i < 1000 * 1000; i++) {\n            square(a);\n        }\n        //vm options\n        //-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints  -XX:CompileCommand=print,VectorizationMicroBenchmark.square\n        // vmulps Parallel Scalar \u5e73\u884c\u6807\u91cf\n        // vmulss Single Scalar \u5355\u6807\u91cf\n    }\n\n}\n\n")),(0,a.kt)("h2",{id:"link"},"link"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"demo: ",(0,a.kt)("a",{parentName:"li",href:"http://daniel-strecker.com/blog/2020-01-14_auto_vectorization_in_java/#Output%20Interpretation"},"http://daniel-strecker.com/blog/2020-01-14_auto_vectorization_in_java/#Output%20Interpretation")),(0,a.kt)("li",{parentName:"ul"},"hsdis: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/liuzhengyang/hsdis"},"https://github.com/liuzhengyang/hsdis"))))}u.isMDXComponent=!0}}]);